require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::PeopleController do

  # This should return the minimal set of attributes required to create a valid
  # Person. As you add validations to Person, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }
  let(:pending_valid_attributes) { { key: 'notemptykey' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Admin::PeopleController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  after(:each) do
    Person.destroy_all
  end

  sign_in_user

  describe 'GET index' do
    it 'assigns all people as @people' do
      person = Person.create! valid_attributes
      get :index, {}, valid_session
      assigns(:people).to_a.should eq([person])
    end
  end

  describe 'GET pending' do
    it 'assigns all pending people as @people' do
      person = Person.create! pending_valid_attributes
      get :pending, {}, valid_session
      assigns(:people).to_a.should eq([person])
      expect(assigns(:title).to_s).to eq('Listing pending people <small>(who have not confirmed)</small>')
    end
  end

  describe 'GET show' do
    it 'assigns the requested admin_person as @admin_person' do
      person = Person.create! valid_attributes
      get :show, {:id => person.to_param}, valid_session
      assigns(:person).should eq(person)
    end
  end

  describe 'GET new' do
    it 'assigns a new admin_person as @admin_person' do
      get :new, {}, valid_session
      assigns(:person).should be_a_new(Person)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested admin_person as @admin_person' do
      person = Person.create! valid_attributes
      get :edit, {:id => person.to_param}, valid_session
      assigns(:person).should eq(person)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Person' do
        expect {
          post :create, {:person => valid_attributes}, valid_session
        }.to change(Person, :count).by(1)
      end

      it 'assigns a newly created admin_person as @admin_person' do
        post :create, {:person => valid_attributes}, valid_session
        assigns(:person).should be_a(Person)
        assigns(:person).should be_persisted
      end

      it 'redirects to the created admin_person' do
        post :create, {:person => valid_attributes}, valid_session
        response.should redirect_to([:admin, Person.last])
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved admin_person as @admin_person' do
        # Trigger the behavior that occurs when invalid params are submitted
        Person.any_instance.stub(:save).and_return(false)
        post :create, {:person => {  }}, valid_session
        assigns(:person).should be_a_new(Person)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Person.any_instance.stub(:save).and_return(false)
        post :create, {:person => {  }}, valid_session
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested admin_person' do
        person = Person.create! valid_attributes
        # Assuming there are no other people in the database, this
        # specifies that the Person created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Person.any_instance.should_receive(:update).with({ 'these' => 'params'})
        put :update, {:id => person.to_param, :person => { 'these' => 'params'}}, valid_session
      end

      it 'assigns the requested admin_person as @admin_person' do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => valid_attributes}, valid_session
        assigns(:person).should eq(person)
      end

      it 'redirects to the admin_person' do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => valid_attributes}, valid_session
        response.should redirect_to([:admin, person])
      end
    end

    describe 'with invalid params' do
      it 'assigns the admin_person as @admin_person' do
        person = Person.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Person.any_instance.stub(:save).and_return(false)
        put :update, {:id => person.to_param, :person => {  }}, valid_session
        assigns(:person).should eq(person)
      end

      it "re-renders the 'edit' template" do
        person = Person.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Person.any_instance.stub(:save).and_return(false)
        put :update, {:id => person.to_param, :person => {  }}, valid_session
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested admin_person' do
      person = Person.create! valid_attributes
      expect {
        delete :destroy, {:id => person.to_param}, valid_session
      }.to change(Person, :count).by(-1)
    end

    it 'redirects to the people list' do
      person = Person.create! valid_attributes
      delete :destroy, {:id => person.to_param}, valid_session
      response.should redirect_to(admin_people_url)
    end
  end

end
